// Generated by CoffeeScript 1.12.4
var Property, Type, assertType, isDev, sync, type;

assertType = require("assertType");

Property = require("Property");

isDev = require("isDev");

Type = require("Type");

sync = require("sync");

type = Type("StrictMap");

type.inherits(null);

type.defineArgs([Object]);

type.defineValues(function(types) {
  return {
    _types: types,
    _map: {}
  };
});

isDev && type.initInstance(function() {
  var prop;
  prop = Property({
    configurable: false
  });
  return sync.each(this._types, (function(_this) {
    return function(type, key) {
      return prop.define(_this, key, {
        get: function() {
          return this._map[key];
        },
        set: function(newValue) {
          assertType(newValue, type, key);
          this._map[key] = newValue;
        }
      });
    };
  })(this));
});

type.defineMethods({
  freeze: function() {
    return Object.freeze(this);
  },
  update: function(newValues) {
    var key, newValue;
    for (key in newValues) {
      newValue = newValues[key];
      if (isDev) {
        if (!(type = this._types[key])) {
          throw Error("Unsupported key: '" + key + "'");
        }
        assertType(newValue, type, key);
      }
      this._map[key] = newValue;
    }
    return this;
  }
});

module.exports = type.build();
